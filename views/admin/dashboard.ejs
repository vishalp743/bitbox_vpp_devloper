<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #ffffff;
            color: #333;
        }

        .container {
            width: 80%;
            margin: 0 auto;
            padding: 20px;
            background-color: #ffffff;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }

        h1, h2 {
            text-align: center;
            color: #ff6600;
        }

        ul {
            list-style-type: none;
            padding: 0;
        }

        li {
            background: #fff5e6;
            margin: 10px 0;
            padding: 15px;
            border: 1px solid #ffcc99;
            border-radius: 5px;
        }

        li form {
            display: inline;
        }

        button, input[type="submit"] {
            background-color: #ff6600;
            color: white;
            border: none;
            padding: 8px 16px;
            margin-left: 10px;
            cursor: pointer;
            border-radius: 5px;
            transition: background-color 0.3s;
        }

        button:hover, input[type="submit"]:hover {
            background-color: #e65c00;
        }

        a {
            display: inline-block;
            text-align: center;
            background-color: #ff6600;
            color: white;
            padding: 10px 20px;
            margin: 20px 0;
            text-decoration: none;
            border-radius: 5px;
            transition: background-color 0.3s;
        }

        a:hover {
            background-color: #e65c00;
        }

        .warranty-info, .serial-info {
            margin-top: 40px;
        }

        .warranty-info strong, .serial-info strong {
            display: inline-block;
            width: 150px;
        }

        .warranty-info form {
            background-color: #fff5e6;
            padding: 20px;
            border-radius: 5px;
            border: 1px solid #ffcc99;
            margin-top: 20px;
        }

        .warranty-info label {
            display: block;
            margin-bottom: 5px;
            color: #ff6600;
        }

        .warranty-info input,
        .warranty-info select {
            width: calc(100% - 20px);
            padding: 10px;
            margin-bottom: 10px;
            border: 1px solid #ffcc99;
            border-radius: 4px;
            box-sizing: border-box;
        }

        .warranty-info button {
            background-color: #ff6600;
            color: white;
            border: none;
            padding: 10px 20px;
            margin-top: 10px;
            cursor: pointer;
            border-radius: 5px;
            transition: background-color 0.3s;
        }

        .warranty-info button:hover {
            background-color: #e65c00;
        }

        .computer {
            background-color: #fff5e6;
            padding: 10px;
            border-radius: 5px;
            margin-bottom: 10px;
            border: 1px solid #ffcc99;
        }

        .computer h3 {
            color: #ff6600;
        }

        .computer label {
            color: #ff6600;
        }
    </style>
</head>
<body>
        <div class="container">
            <h1>Admin Dashboard</h1>
            
            <h2>All Drivers</h2>
            <ul>
                <% drivers.forEach(driver => { %>
                    <li>
                        <%= driver.version %> - <%= driver.model %> -  <%= new Date(driver.date).toDateString() %>
                    
                        <form action="http://localhost:5000/admin/drivers/delete/<%= driver._id %>" method="POST">
                            <button type="submit" style="float: right;">Delete</button>
                        </form>
                    </li>
                <% }); %>
            </ul>
            <a href="http://localhost:5000/admin/drivers/upload">Upload New Driver</a>
            <br><br>
            <hr>
            <div style="align-items: center;text-align: center;justify-content: center;">
                <button><a href="http://localhost:5000/single_warrenty_verify">Single Warranty  Verification</a></button>
                <button><a href="http://localhost:5000/bulk_warrenty_verify">Bulk Warranty  Verification</a></button>
            </div>
             <hr>
             
             <div class="warranty-info">
                <h2>Warranty Registration</h2>
                <form action="http://localhost:5000/bulk-verify-warranty" method="POST" enctype="multipart/form-data" onsubmit="return validateForm()">
                    <label for="numComputers">Number of Computers:</label>
                    <input type="number" id="numComputers" name="numComputers" min="1" required onchange="addComputerFields()"><br><br>
    
                    <label for="expiryyear">Expiry (In Years):</label>
                    <input type="text" id="expiryyear" name="expiryyear" required><br><br>
    
                    <label for="name">Name:</label>
                    <input type="text" id="name" name="name" required><br><br>
    
                    <label for="email">Email:</label>
                    <small style="color:black;">Note: For Corporate or Federal institutions, submit only registered organizationâ€™s email domain.</small>
                    <input type="email" id="email" name="email" required><br><br>
    
                    <label for="purchaseDate">Purchase Date:</label>
                    <input type="date" id="purchaseDate" name="purchaseDate" required><br><br>
    
                    <label for="address">Address:</label>
                    <input type="text" id="address" name="address" required><br><br>
    
                    <label for="city">City:</label>
                    <input type="text" id="city" name="city" required><br><br>
    
                    <label for="pincode">Pincode:</label>
                    <input type="text" id="pincode" name="pincode" required><br><br>
    
                    <label for="state">State:</label>
                    <input type="text" id="state" name="state" required><br><br>
    
                    <label for="phoneNumber">Phone Number:</label>
                    <input type="text" id="phoneNumber" name="phoneNumber" required><br><br>
    
                    <label for="billPdf">Upload Bill PDF:</label>
                    <input type="file" id="billPdf" name="billPdf" accept="application/pdf" required><br><br>
    
                    <label>Purchased Medium:</label>
                    <input type="radio" id="direct" name="purchaseMedium" value="direct" onclick="togglePurchaseMedium()"> Direct
                    <input type="radio" id="reseller" name="purchaseMedium" value="reseller" onclick="togglePurchaseMedium()"> Through Reseller<br><br>
    
                    <div id="purchaseDetails"></div>
    
                    <label for="warrantyType">Warranty Type:</label>
                    <input type="radio" id="on-site" name="warrantyType" value="on-site" onclick="toggleWarrantyOptions()"> On-Site
                    <input type="radio" id="off-site" name="warrantyType" value="off-site" onclick="toggleWarrantyOptions()"> Off-Site
                    <div id="warrantyOptions" style="display: none;">
                        <select id="warrantyOptionSelect" name="warrantyOption" required>
                            <option value="" disabled selected>Select Warranty Option</option>
                        </select>
                    </div>
                    <input type="hidden" id="selectedWarrantyOption" name="selectedWarrantyOption" value="">
    
                    <div id="computerFields"></div>
    
                    <button type="submit" class="verify-btn">Register</button>
                </form>
            </div>
    
             <!-- This div will hold dynamically added computer fields -->
            <script>
                function addComputerFields() {
                    const numComputers = document.getElementById('numComputers').value;
                    const computerFieldsDiv = document.getElementById('computerFields');
                    computerFieldsDiv.innerHTML = '';
        
                    for (let i = 1; i <= numComputers; i++) {
                        const computerDiv = document.createElement('div');
                        computerDiv.classList.add('computer');
        
                        const heading = document.createElement('h3');
                        heading.textContent = `Computer ${i}`;
        
                        const serialNumberLabel = document.createElement('label');
                        serialNumberLabel.textContent = 'Serial Number:';
                        const serialNumberInput = document.createElement('input');
                        serialNumberInput.type = 'text';
                        serialNumberInput.name = `serialNumber${i}`;
                        serialNumberInput.id = `serialNumber${i}`;
                        serialNumberInput.required = true;
        
                        const checkSerialButton = document.createElement('button');
                        checkSerialButton.type = 'button';
                        checkSerialButton.textContent = 'Check Serial Number';
                        checkSerialButton.id = `checkSerialButton${i}`;
                        checkSerialButton.addEventListener('click', function() {
                            const serialNumber = serialNumberInput.value;
                            fetch('http://localhost:5000/serial-numbers/' + serialNumber)
                                .then(response => response.json())
                                .then(data => {
                                    const resultElement = document.getElementById(`serialCheckResult${i}`);
                                    if (data.valid) {
                                        resultElement.textContent = 'Serial number is valid.';
                                        resultElement.className = 'success-message';
                                    } else {
                                        resultElement.textContent = 'Serial number is invalid.';
                                        resultElement.className = 'error-message';
                                    }
                                })
                                .catch(error => console.error('Error checking serial number:', error));
                        });
        
                        const serialCheckResult = document.createElement('p');
                        serialCheckResult.id = `serialCheckResult${i}`;
        
                        const modelLabel = document.createElement('label');
                        modelLabel.textContent = 'Model:';
                        const modelInput = document.createElement('input');
                        modelInput.type = 'text';
                        modelInput.name = `model${i}`;
                        modelInput.required = true;
        
                        computerDiv.appendChild(heading);
                        computerDiv.appendChild(serialNumberLabel);
                        computerDiv.appendChild(serialNumberInput);
                        computerDiv.appendChild(checkSerialButton);
                        computerDiv.appendChild(serialCheckResult);
                        computerDiv.appendChild(document.createElement('br'));
                        computerDiv.appendChild(modelLabel);
                        computerDiv.appendChild(modelInput);
                        computerDiv.appendChild(document.createElement('br'));
        
                        computerFieldsDiv.appendChild(computerDiv);
                    }
                }
        
                function togglePurchaseMedium() {
                    const purchaseMedium = document.querySelector('input[name="purchaseMedium"]:checked').value;
                    const purchaseDetailsDiv = document.getElementById('purchaseDetails');
                    purchaseDetailsDiv.innerHTML = '';
        
                    if (purchaseMedium === 'direct') {
                        const companyLabel = document.createElement('label');
                        companyLabel.textContent = 'Company:';
                        const companyInput = document.createElement('input');
                        companyInput.type = 'text';
                        companyInput.name = 'company';
                        companyInput.value = 'PATA ELECTRIC COMPANY';
                        companyInput.readOnly = true;
        
                        purchaseDetailsDiv.appendChild(companyLabel);
                        purchaseDetailsDiv.appendChild(companyInput);
                    } else if (purchaseMedium === 'reseller') {
                        const resellerLabel = document.createElement('label');
                        resellerLabel.textContent = 'Select Reseller:';
                        const resellerSelect = document.createElement('select');
                        resellerSelect.name = 'reseller';
        
                        // Fetch reseller options from the server
                        fetch('http://localhost:5000/resellers')
                            .then(response => response.json())
                            .then(data => {
                                data.resellers.forEach(reseller => {
                                    const option = document.createElement('option');
                                    option.value = reseller.name;
                                    option.textContent = reseller.name;
                                    resellerSelect.appendChild(option);
                                });
                            })
                            .catch(error => console.error('Error fetching resellers:', error));
        
                        purchaseDetailsDiv.appendChild(resellerLabel);
                        purchaseDetailsDiv.appendChild(resellerSelect);
                    }
                }
        
                function toggleWarrantyOptions() {
    const warrantyType = document.querySelector('input[name="warrantyType"]:checked').value;
    const warrantyOptionSelect = document.getElementById('warrantyOptionSelect');
    const selectedWarrantyOption = document.getElementById('selectedWarrantyOption');

    warrantyOptionSelect.innerHTML = '';
    
    if (warrantyType === 'on-site') {
        const options = [
            { value: '8x5 On-site next day response', label: '8x5 On-site next day response' },
            { value: 'On-site 72 hours Issue resolution', label: 'On-site 72 hours Issue resolution' },
            { value: '4 Hours / 24x7 On-site Support', label: '4 Hours / 24x7 On-site Support' }
        ];

        options.forEach(option => {
            const optionElement = document.createElement('option');
            optionElement.value = option.value;
            optionElement.textContent = option.label;
            warrantyOptionSelect.appendChild(optionElement);
        });
    } else if (warrantyType === 'off-site') {
        const options = [
        { value: 'Off-Site 72 Hours Resolution', label: 'Off-Site 72 Hours Resolution' },
        { value: 'Off-site', label: 'Off-site' }
        ];

        options.forEach(option => {
            const optionElement = document.createElement('option');
            optionElement.value = option.value;
            optionElement.textContent = option.label;
            warrantyOptionSelect.appendChild(optionElement);
        });
    }

    // Update the hidden input field with the selected option
    selectedWarrantyOption.value = warrantyOptionSelect.value;

    document.getElementById('warrantyOptions').style.display = 'block';
}


        
                function validateForm() {
                    // Validate model numbers
                    const numComputers = document.getElementById('numComputers').value;
                    for (let i = 1; i <= numComputers; i++) {
                        const modelInput = document.getElementById(`model${i}`);
                        if (modelInput.value.trim() === '') {
                            alert(`Model number for computer ${i} is required.`);
                            modelInput.focus();
                            return false;
                        }
                    }
        
                    return true;
                }
            </script>
            
            
           <hr>
            
            <div class="serial-info">
                <h2>All Serial Numbers</h2>
                <ul>
                    <% serials.forEach(serial => { %>
                        <li>
                            <div>
                                <strong>Serial Number:</strong> <%= serial.serialNumber %><br>
                                <strong>Model Number:</strong> <%= serial.modelNumber %><br>
                                <strong>Tested By:</strong> <%= serial.testedBy %><br>
                                <strong>Uploaded File:</strong> <a href="/uploads/<%= serial.uploadedFile %>" target="_blank"><%= serial.uploadedFile %></a><br>
                                <h2 style="color: #e65c00;text-align: left;">Machine Specification :- </h2> 
                                <strong>Processor:</strong> <%= serial.processor %><br>
                                <strong>Motherboard:</strong> <%= serial.motherboard %><br>
                                <strong>RAM:</strong> <%= serial.ram %><br>
                                <strong>SSD:</strong> <%= serial.ssd %><br>
                                <strong>HDD:</strong> <%= serial.hdd %><br>
                                <strong>Monitor Size:</strong> <%= serial.monitorSize %>
                            </div>
                            <form action="http://localhost:5000/delete-serial" method="POST" style="display:inline;">
                                <input type="hidden" name="serialNumber" value="<%= serial.serialNumber %>">
                                <input type="hidden" name="modelNumber" value="<%= serial.modelNumber %>">
                                <button type="submit" class="delete-btn">Delete</button>
                            </form>
                        </li>
                    <% }); %>
                </ul>
                <form action="http://localhost:5000/add-serial" method="POST" enctype="multipart/form-data">
                    <input type="text" name="serialNumber" placeholder="Enter Serial Number" pattern="[A-Z0-9]{10}" required>
                    <input type="text" name="modelNumber" placeholder="Enter Model Number" oninput="this.value = this.value.toUpperCase()" required>
                    <input type="text" name="testedBy" placeholder="Tested By" required>
                    <br><br>
                    <small>Upload Test Report</small>
                    <input type="file" name="file" accept="" required>
                    <br><br>
                    <small>Submit Machine Specification</small>
                    <input type="text" name="processor" placeholder="Processor" required>
                    <input type="text" name="motherboard" placeholder="Motherboard" required>
                    <input type="text" name="ram" placeholder="RAM" required>
                    <input type="text" name="ssd" placeholder="SSD" required>
                    <input type="text" name="hdd" placeholder="HDD" required>
                    <input type="text" name="monitorSize" placeholder="Monitor Size" required>
                    <button type="submit" class="add-btn">Add Serial Number</button>
                </form>
            </div>
            <script>
                document.querySelector('form[action="/add-serial"]').addEventListener('submit', async function (event) {
                    event.preventDefault(); // Prevent default form submission
                
                    const form = event.target;
                    const formData = new FormData(form);
                
                    try {
                        const response = await fetch(form.action, {
                            method: 'POST',
                            body: formData
                        });
                
                        if (!response.ok) {
                            const errorMessage = await response.text();
                            alert(errorMessage); // Display error message
                        } else {
                            window.location.reload(); // Reload the page on success
                        }
                    } catch (error) {
                        console.error('Error submitting form:', error);
                        alert('An error occurred while adding the serial number.');
                    }
                });
                </script>
                
            

            
        </div>

        <hr>
        <div class="expiring-warranties">
            <h2>Recently Expiring Warranties</h2>
            <ul></ul>
        </div>

        <hr>




        <div class="add-reseller">
            <h2>Add New Reseller</h2>
            <form id="addResellerForm">
                <label for="resellerName">Reseller Name:</label>
                <input type="text" id="resellerName" name="resellerName" required><br><br>

                <label for="resellerEmail">Reseller Email:</label>
                <input type="email" id="resellerEmail" name="resellerEmail" required><br><br>

                <button type="submit">Add Reseller</button>
            </form>
        </div>
        <div class="reseller-list">
            <h2>Reseller List</h2>
            <ul id="resellerList"></ul>
        </div>

        

        <script>
            // Function to fetch and display resellers
            async function fetchResellers() {
                try {
                    const response = await fetch('http://localhost:5000/resellers2');
                    const resellers = await response.json();
                    const resellerList = document.getElementById('resellerList');
                    resellerList.innerHTML = '';
                    resellers.forEach(reseller => {
                        const li = document.createElement('li');
                        li.innerHTML = `<strong>Name:</strong> ${reseller.name} <br> <strong>Email:</strong> ${reseller.email}`;
                        resellerList.appendChild(li);
                    });
                } catch (error) {
                    console.error('Error fetching resellers:', error);
                }
            }
    
            // Fetch resellers on page load
            window.onload = fetchResellers;

            async function deleteReseller(id) {
            try {
                const response = await fetch(`http://localhost:5000/delete-reseller/${id}`, {
                    method: 'DELETE'
                });
                
                if (response.ok) {
                    alert('Reseller deleted successfully');
                } else {
                    alert('Error deleting reseller');
                }
            } catch (error) {
                console.error('Error:', error);
            }
        }
    
            // Handle add reseller form submission
            document.getElementById('addResellerForm').addEventListener('submit', async function(event) {
                event.preventDefault();
    
                const resellerName = document.getElementById('resellerName').value;
                const resellerEmail = document.getElementById('resellerEmail').value;
    
                try {
                    const response = await fetch('http://localhost:5000/add-reseller', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ name: resellerName, email: resellerEmail })
                    });
    
                    if (response.ok) {
                        alert('Reseller added successfully');
                        document.getElementById('addResellerForm').reset();
                        fetchResellers(); // Refresh the reseller list
                    } else {
                        alert('Error adding reseller');
                    }
                } catch (error) {
                    console.error('Error adding reseller:', error);
                }
            });
        </script>



    </body>
    </html>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
    fetch('/expiring-warranties')
        .then(response => response.json())
        .then(data => {
            const warrantiesList = document.querySelector('.expiring-warranties ul');
            data.forEach(warranty => {
                const listItem = document.createElement('li');
                const { name, email, serialNumber, purchaseDate, expiryDate, address, city, pincode, state, phoneNumber, model } = warranty;
                const formattedExpiryDate = new Date(expiryDate).toLocaleDateString(); // Format expiry date as needed

                listItem.innerHTML = `
                    <p>Name: ${name}</p>
                    <p>Email: ${email}</p>
                    <p>Serial Number: ${serialNumber}</p>
                    <p>Purchase Date: ${new Date(purchaseDate).toLocaleDateString()}</p>
                    <p>Expiry Date: ${formattedExpiryDate}</p>
                    <p>Address: ${address}</p>
                    <p>City: ${city}</p>
                    <p>Pincode: ${pincode}</p>
                    <p>State: ${state}</p>
                    <p>Phone Number: ${phoneNumber}</p>
                    <p>Model: ${model}</p>
                    <button class="notify-button" data-email="${email}" data-serial="${serialNumber}" data-expiry="${expiryDate}">Notify</button>
                `;
                warrantiesList.appendChild(listItem);
            });

            // Add event listeners to Notify buttons
            warrantiesList.addEventListener('click', (event) => {
                if (event.target.classList.contains('notify-button')) {
                    const email = event.target.getAttribute('data-email');
                    const serialNumber = event.target.getAttribute('data-serial');
                    const expiryDate = event.target.getAttribute('data-expiry');
                    
                    // Encode parameters for URL
                    const encodedEmail = encodeURIComponent(email);
                    const encodedSerialNumber = encodeURIComponent(serialNumber);
                    const encodedExpiryDate = encodeURIComponent(expiryDate);

                    fetch(`/send-notification?email=${encodedEmail}&serialNumber=${encodedSerialNumber}&expiryDate=${encodedExpiryDate}`)
                        .then(response => {
                            if (response.ok) {
                                alert('Notification email sent successfully.');
                            } else {
                                alert('Failed to send notification email.');
                            }
                        })
                        .catch(error => console.error('Error sending notification:', error));
                }
            });
        })
        .catch(error => console.error('Error fetching expiring warranties:', error));
});

    </script>
    

<script>
    function filterWarranties(status) {
    const warrantyList = document.getElementById('warrantyList').getElementsByTagName('li');
    for (let i = 0; i < warrantyList.length; i++) {
        const warranty = warrantyList[i];
        if (status === 'verified' && warranty.classList.contains('verified')) {
            warranty.style.display = 'block';
        } else if (status === 'unverified' && warranty.classList.contains('unverified')) {
            warranty.style.display = 'block';
        } else {
            warranty.style.display = 'none';
        }
    }
}

</script>

<script>
    function validateForm() {
        const phoneNumber = document.getElementById('phoneNumber').value;
        const serialNumbers = document.querySelectorAll('input[id^="serialNumber"]');
        const modelNumbers = document.querySelectorAll('input[id^="model"]');
        let isValid = true;

        // Phone Number Validation
        if (!phoneNumber.startsWith('+91') || phoneNumber.length !== 13 || !(/^\+?\d+$/.test(phoneNumber.slice(1)))) {
    alert('Phone Number must start with +91 and be 12 digits long.');
    isValid = false;
}

        // Serial Number Validation
        serialNumbers.forEach(serialNumber => {
            if (serialNumber.value.length !== 10 || !/^[A-Z0-9]+$/.test(serialNumber.value)) {
                alert('Serial Number must be 10 characters long and contain only uppercase letters and digits.');
                isValid = false;
            }
        });

//         // Model Number Validation
//         modelNumbers.forEach(modelNumber => {
//     const modelPattern = /^[A-Z0-9!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]*$/;
//     if (!modelPattern.test(modelNumber.value)) {
//         alert('Model number must follow the pattern contain only uppercase letters and digits.');
//         event.preventDefault(); // Add event parameter here
//         isValid = false;
//     }
// });


        return isValid;
    }
</script>
